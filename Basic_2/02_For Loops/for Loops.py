"""
حلقه‌های for در پایتون به عنوان ایتریتور (Iterator) عمل می‌کنند؛ یعنی از اشیاء موجود در یک دنباله یا هر شیء ایتریبل دیگری عبور می‌کند.
 اشیاء‌ای که تاکنون آموخته‌ایم و می‌توانیم روی آن‌ها حلقه بزنیم شامل رشته‌ها، لیست‌ها،
 تاپل‌ها و حتی ایتریبل‌های داخلی دیکشنری‌ها (مانند کلیدها یا مقادیر) می‌شود.
"""
# For loop acts as an iterator in Python (حلقه for در پایتون به عنوان ایتریتور عمل می‌کند)
# This example shows basic iteration concept (این مثال مفهوم پایه ایتریشن را نشان می‌دهد)
sample_list = [1, 2, 3]
for item in sample_list:
    print(f"Current item in loop: {item}")
    # خروجی:
    # Current item in loop: 1
    # Current item in loop: 2
    # Current item in loop: 3
    # (ترجمه: آیتم فعلی در حلقه)
"""
نکته کلیدی:
حلقه‌های for امکان پیمایش از اشیاء ایتریبل را فراهم می‌کنند.
نام متغیری که برای آیتم استفاده می‌کنید کاملاً به عهده شماست و
 باید نامی انتخاب کنید که معنادار باشد و در زمان بازبینی کد قابل فهم باشد.
این نام آیتم سپس می‌تواند در داخل حلقه مرجع داده شود،
 مثلاً اگر می‌خواهید از دستورات if برای انجام بررسی‌ها استفاده کنید.
"""

# -----------------------------------------------------------------------------------------------------
print("-" * 80)
"""
ساختار پایه حلقه for (Basic Structure of for Loops)
"""

"""
ساختار کلی یک حلقه for در پایتون به این صورت است
"""
# # General format of for loop (ساختار کلی حلقه for)
# for item in object:
#     # statements to do stuff (دستورات برای انجام کارها)

# مثال ساده از ساختار حلقه for
# Basic for loop structure example (مثال ساختار پایه حلقه for)
fruits = ['apple', 'banana', 'cherry']

for fruit in fruits:
    print(f"Fruit name: {fruit}")
    # خروجی:
    # Fruit name: apple
    # Fruit name: banana
    # Fruit name: cherry
    # (ترجمه: نام میوه)
"""
نکات مهم درباره ساختار حلقه for:
متغیر آیتم: نامی که برای آیتم انتخاب می‌کنید می‌تواند هر چیزی باشد (معمولاً از نام‌های معنادار استفاده می‌شود).
شیء هدف: شیء‌ای که می‌خواهید روی آن حلقه بزنید (لیست، رشته، تاپل و غیره).
بدنه حلقه: کدهایی که باید برای هر آیتم اجرا شوند (با تورفتگی مشخص می‌شوند).
"""
# Example with different variable name (مثال با نام متغیر متفاوت)
colors = ['red', 'green', 'blue']

for color_name in colors:  # Using descriptive variable name (استفاده از نام متغیر توصیفی)
    print(f"Processing color: {color_name}")
    # خروجی:
    # Processing color: red
    # Processing color: green
    # Processing color: blue
    # (ترجمه: پردازش رنگ)

# -----------------------------------------------------------------------------------------------------
print("-" * 80)
"""
 استفاده از حلقه for با لیست‌ها (Using for Loops with Lists)
یکی از رایج‌ترین کاربردهای حلقه‌های for پیمایش از لیست‌ها است.
"""

"""
مثال پیمایش از لیست
"""
# Iterating through a list (پیمایش از لیست)
list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

for num in list1:
    print(f"Number in list: {num}")
    # خروجی: اعداد 1 تا 10 هر کدام در یک خط
    # (ترجمه: عدد در لیست)

"""
مثال پیمایش و بررسی اعداد زوج
"""
# Printing only even numbers from a list (چاپ فقط اعداد زوج از لیست)
for num in list1:
    if num % 2 == 0:  # Check if number is even (بررسی زوج بودن عدد)
        print(f"Even number: {num}")
        # خروجی: اعداد 2، 4، 6، 8، 10
        # (ترجمه: عدد زوج)

"""
مثال پیمایش با بررسی اعداد زوج و فرد
"""
# Checking both even and odd numbers (بررسی هم اعداد زوج و هم فرد)
for num in list1:
    if num % 2 == 0:
        print(f"Even number: {num}")  # خروجی برای اعداد زوج
        # (ترجمه: عدد زوج)
    else:
        print("Odd number")  # خروجی برای اعداد فرد
        # (ترجمه: عدد فرد)

"""
مثال جمع اعداد لیست
"""
# Summing up numbers in a list (جمع اعداد در لیست)
list_sum = 0

for num in list1:
    list_sum += num  # Equivalent to list_sum = list_sum + num (معادل list_sum = list_sum + num)

print(f"Sum of all numbers: {list_sum}")
# خروجی: Sum of all numbers: 55 (ترجمه: مجموع تمام اعداد)

# -----------------------------------------------------------------------------------------------------
print("-" * 80)
"""
عملگر مدولو (Modulo Operator)
عملگر مدولو (%) امکان دریافت باقی‌مانده در یک تقسیم را فراهم می‌کند.
 این عملگر برای بررسی اعداد زوج و فرد بسیار مفید است.
"""

"""
مثال‌های عملگر مدولو
"""
# Modulo operator examples (مثال‌های عملگر مدولو)
print("17 % 5 =", 17 % 5)  # خروجی: 17 % 5 = 2 (ترجمه: باقی‌مانده 17 تقسیم بر 5)
print("10 % 3 =", 10 % 3)  # خروجی: 10 % 3 = 1 (ترجمه: باقی‌مانده 10 تقسیم بر 3)
print("18 % 7 =", 18 % 7)  # خروجی: 18 % 7 = 4 (ترجمه: باقی‌مانده 18 تقسیم بر 7)
print("4 % 2 =", 4 % 2)    # خروجی: 4 % 2 = 0 (ترجمه: باقی‌مانده 4 تقسیم بر 2)

"""
بررسی اعداد زوج با مدولو
"""
# Checking even numbers using modulo (بررسی اعداد زوج با استفاده از مدولو)
number = 8
if number % 2 == 0:
    print(f"{number} is an even number")  # خروجی: 8 is an even number (ترجمه: 8 یک عدد زوج است)
else:
    print(f"{number} is an odd number")   # این خط اجرا نمی‌شود

number = 7
if number % 2 == 0:
    print(f"{number} is an even number")  # این خط اجرا نمی‌شود
else:
    print(f"{number} is an odd number")   # خروجی: 7 is an odd number (ترجمه: 7 یک عدد فرد است)

"""
نکته مهم:
اگر یک عدد بر 2 تقسیم شود و باقی‌مانده صفر باشد، آن عدد زوج است.
 این ویژگی برای شناسایی اعداد زوج در حلقه‌ها بسیار مفید است.
"""

# -----------------------------------------------------------------------------------------------------
print("-" * 80)
"""
استفاده از حلقه for با رشته‌ها (Using for Loops with Strings)
رشته‌ها در پایتون یک دنباله هستند،
 بنابراین هنگام پیمایش از آن‌ها، به هر کاراکتر در آن رشته دسترسی خواهیم داشت.
"""

"""
مثال پیمایش از رشته
"""
# Iterating through a string (پیمایش از رشته)
for letter in 'This is a string.':
    print(f"Character: {letter}")
    # خروجی: هر کاراکتر در یک خط جدید
    # (ترجمه: کاراکتر)

"""
مثال شمارش کاراکترها در رشته
"""
# Counting characters in a string (شمارش کاراکترها در رشته)
text = "Hello, World!"
count = 0

for _ in text:  # Using _ as a throwaway variable (استفاده از _ به عنوان متغیر موقت)
    count += 1

print(f"Total characters: {count}")  # خروجی: Total characters: 13 (ترجمه: تعداد کل کاراکترها)

"""
مثال جستجوی کاراکتر خاص در رشته
"""
# Finding specific character in string (یافتن کاراکتر خاص در رشته)
text = "Python Programming"
target = 'o'
count = 0

for char in text:
    if char == target:
        count += 1

print(f"The character '{target}' appears {count} times")
# خروجی: The character 'o' appears 2 times (ترجمه: کاراکتر 'o' 2 بار ظاهر شده است)

# -----------------------------------------------------------------------------------------------------
print("-" * 80)
"""
استفاده از حلقه for با تاپل‌ها (Using for Loops with Tuples)
تاپل‌ها نیز ایتریبل هستند و می‌توانیم روی آن‌ها حلقه بزنیم.
 تاپل‌ها ویژگی خاصی در حلقه‌های for دارند که به آن بسته‌گشایی تاپل (Tuple Unpacking) می‌گویند.
"""

"""
مثال پیمایش ساده از تاپل
"""
# Iterating through a tuple (پیمایش از تاپل)
tup = (1, 2, 3, 4, 5)

for t in tup:
    print(f"Tuple item: {t}")
    # خروجی: اعداد 1 تا 5 هر کدام در یک خط
    # (ترجمه: آیتم تاپل)

"""
مثال بسته‌گشایی تاپل (Tuple Unpacking)
"""
# Tuple unpacking in for loops (بسته‌گشایی تاپل در حلقه‌های for)
list2 = [(2, 4), (6, 8), (10, 12)]

# Without unpacking (بدون بسته‌گشایی)
for tup in list2:
    print(f"Tuple: {tup}")
    # خروجی:
    # Tuple: (2, 4)
    # Tuple: (6, 8)
    # Tuple: (10, 12)
    # (ترجمه: تاپل)

# With unpacking (با بسته‌گشایی)
for (t1, t2) in list2:
    print(f"First value: {t1}")
    # خروجی: 2، 6، 10 هر کدام در یک خط
    # (ترجمه: مقدار اول)

"""
نکته مهم:
وقتی یک دنباله حاوی تاپل‌ها را پیمایش می‌کنید،
 می‌توانید از بسته‌گشایی تاپل استفاده کنید تا به آیتم‌های داخل تاپل دسترسی پیدا کنید.
 این ویژگی مهم است چون بسیاری از اشیاء، ایتریبل‌های خود را از طریق تاپل‌ها ارائه می‌دهند.
"""

# -----------------------------------------------------------------------------------------------------
print("-" * 80)
"""
استفاده از حلقه for با دیکشنری‌ها (Using for Loops with Dictionaries)
دیکشنری‌ها در پایتون چندین متد برای ایتریشن ارائه می‌دهند: .keys(), .values() و .items().
"""

"""
مثال پیمایش ساده از دیکشنری
"""
# Basic dictionary iteration (پیمایش پایه از دیکشنری)
d = {'k1': 1, 'k2': 2, 'k3': 3}

for item in d:
    print(f"Dictionary key: {item}")
    # خروجی: k1, k2, k3 هر کدام در یک خط
    # (ترجمه: کلید دیکشنری)

"""
نکته مهم:
پیمایش مستقیم از دیکشنری فقط کلیدها را برمی‌گرداند. برای دریافت مقادیر یا هر دو کلید و مقدار،
 باید از متدهای .values() و .items() استفاده کنید.
"""

"""
مثال استفاده از متدهای دیکشنری
"""
# Dictionary methods for iteration (متدهای دیکشنری برای ایتریشن)
print("Keys:", list(d.keys()))      # خروجی: Keys: ['k1', 'k2', 'k3'] (ترجمه: کلیدها)
print("Values:", list(d.values()))  # خروجی: Values: [1, 2, 3] (ترجمه: مقادیر)
print("Items:", list(d.items()))    # خروجی: Items: [('k1', 1), ('k2', 2), ('k3', 3)] (ترجمه: آیتم‌ها)

"""
مثال بسته‌گشایی دیکشنری (Dictionary Unpacking)
"""
# Dictionary unpacking with .items() (بسته‌گشایی دیکشنری با استفاده از .items())
for k, v in d.items():
    print(f"Key: {k}, Value: {v}")
    # خروجی:
    # Key: k1, Value: 1
    # Key: k2, Value: 2
    # Key: k3, Value: 3
    # (ترجمه: کلید و مقدار)

"""
مثال مرتب‌سازی مقادیر دیکشنری
"""
# Sorting dictionary values (مرتب‌سازی مقادیر دیکشنری)
sorted_values = sorted(d.values())
print(f"Sorted values: {sorted_values}")  # خروجی: Sorted values: [1, 2, 3] (ترجمه: مقادیر مرتب‌شده)

"""
نکته مهم:
دیکشنری‌ها غیرمرتب هستند (در نسخه‌های پایتون قبل از 3.7).
در پایتون 3.7+، ترتیب درج کلیدها حفظ می‌شود،
 اما برای اطمینان از ترتیب خاصی، باید از توابع مرتب‌سازی استفاده کنید.
"""

# -----------------------------------------------------------------------------------------------------
print("-" * 80)
"""
جمع‌بندی (Conclusion)
حلقه‌های for ابزاری قدرتمند برای پیمایش از انواع ایتریبل‌ها در پایتون هستند.
 ما یاد گرفتیم که چگونه از حلقه‌های for برای پیمایش از تاپل‌ها، لیست‌ها،
 رشته‌ها و دیکشنری‌ها استفاده کنیم. این ابزار برای برنامه‌نویسی پایتون بسیار مهم است،
 بنابراین مطمئن شوید که به خوبی آن را یاد گرفته‌اید و مثال‌های بالا را درک کرده‌اید.
"""

"""
مثال نهایی ترکیبی
"""
# Combined example showing multiple concepts (مثال ترکیبی که چندین مفهوم را نشان می‌دهد)
data = {
		'fruits' : [ 'apple' , 'banana' , 'cherry' ] ,
		'quantities' : [ 3 , 5 , 2 ] ,
		'prices' : [ 1.5 , 0.8 , 2.0 ]
}

for i , fruit in enumerate ( data [ 'fruits' ] ) :
	quantity = data [ 'quantities' ] [ i ]
	price = data [ 'prices' ] [ i ]
	total = quantity * price

	print ( f"{fruit}: {quantity} x ${price:.2f} = ${total:.2f}" )
# خروجی:
# apple: 3 x $1.50 = $4.50
# banana: 5 x $0.80 = $4.00
# cherry: 2 x $2.00 = $4.00
# (ترجمه: محاسبه قیمت کل هر میوه)

"""
نکات کلیدی برای استفاده از حلقه for:
برای پیمایش از ایتریبل‌ها (لیست‌ها، رشته‌ها، تاپل‌ها، دیکشنری‌ها) استفاده می‌شود.
از تورفتگی برای مشخص کردن بدنه حلقه استفاده می‌شود.
می‌توان از if و سایر دستورات شرطی درون حلقه استفاده کرد.
بسته‌گشایی (Unpacking) امکان دسترسی به عناصر داخل تاپل‌ها و دیکشنری‌ها را فراهم می‌کند.
برای جمع‌آوری اطلاعات در طول حلقه، می‌توان از متغیرهای خارج از حلقه استفاده کرد.
✅ نکته کلیدی:
"""

"""
حلقه‌های for برای پیمایش از ایتریبل‌ها در پایتون ضروری هستند.
درک کامل از نحوه استفاده از آن‌ها با لیست‌ها، رشته‌ها، تاپل‌ها و دیکشنری‌ها بسیار مهم است.
از تورفتگی صحیح برای مشخص کردن بدنه حلقه استفاده کنید.
از بسته‌گشایی (Unpacking) برای دسترسی راحت‌تر به عناصر استفاده کنید.
"""
