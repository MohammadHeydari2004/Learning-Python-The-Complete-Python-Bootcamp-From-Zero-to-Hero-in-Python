"""
در این بخش به بررسی سریع دستورات پایتون (Python Statements) می‌پردازیم.
 این درس به ویژه تفاوت‌های پایتون با سایر زبان‌های برنامه‌نویسی مانند C++ را برجسته می‌کند.

هدف اصلی این رویکرد یادگیری دو بخش است:

اگر از زبان‌های دیگر می‌آیید، این محتوا درک شما از پایتون را به سرعت افزایش می‌دهد.
آشنایی با دستورات پایتون به شما کمک می‌کند تا در آینده راحت‌تر سایر زبان‌های برنامه‌نویسی را بخوانید.
"""
# Example of a simple statement in Python (مثال یک دستور ساده در پایتون)
a = 5
b = 3

# If statement in Python (دستور شرطی if در پایتون)
if a > b:
    print("a is greater than b")  # خروجی: a is greater than b (ترجمه: a بزرگتر از b است)
else:
    print("a is not greater than b")

"""
نکته کلیدی:
دستورات پایتون برخلاف بسیاری از زبان‌های دیگر، 
خوانایی بالایی دارند و از ساختارهای اضافی کمتری استفاده می‌کنند.
این ویژگی باعث می‌شود کد پایتون کمتر به چشم می‌آید و
 بیشتر شبیه به زبان انسانی است.
"""

# -----------------------------------------------------------------------------------------------------
print("-" * 80)
"""
تفاوت‌های اصلی پایتون با سایر زبان‌ها (Main Differences Between Python and Other Languages)
یکی از بهترین راه‌ها برای درک سریع پایتون،
 مقایسه آن با زبان‌های دیگر است. فرض کنید می‌خواهیم دستور ساده‌ای بنویسیم که بگوید:
 "اگر a بزرگتر از b بود، مقدار 2 را به a و مقدار 4 را به b اختصاص بده".
"""

"""
مقایسه دستورات شرطی در پایتون و سایر زبان‌ها
"""
# Version 1: In other languages like C++ (نسخه 1: در سایر زبان‌ها مانند C++)
# if (a > b) {
#     a = 2;
#     b = 4;
# }

# Version 2: In Python (نسخه 2: در پایتون)
a = 5
b = 3
if a > b:
    a = 2
    b = 4
    print(f"After condition: a = {a}, b = {b}")
    # خروجی: After condition: a = 2, b = 4 (ترجمه: پس از شرط: a و b)

"""
تفاوت‌های کلیدی:
حذف پرانتز و آکولاد: پایتون به جای استفاده از پرانتز () و آکولاد {} از دو نقطه (:) و
 فاصله‌گذاری (Whitespace) استفاده می‌کند.
عدم استفاده از نقطه‌ویرگول: در بسیاری از زبان‌ها از نقطه‌ویرگول ; برای پایان دستور استفاده می‌شود،
 اما در پایتون پایان خط همان پایان دستور است.
اهمیت تورفتگی: در پایتون، تورفتگی (Indentation) بخشی از سینتکس زبان است و
 تعیین می‌کند که کدام خطوط کد درون یک بلوک شرطی یا حلقه قرار می‌گیرند.
"""

# -----------------------------------------------------------------------------------------------------
print("-" * 80)
"""
استفاده از دو نقطه و فاصله‌گذاری (Colon and Whitespace Usage)
در پایتون، دو نقطه (:) برای پایان یافتن یک دستور شرطی یا حلقه استفاده می‌شود و
 فاصله‌گذاری (Whitespace) برای نشان دادن بلوک‌های کد به کار می‌رود.
"""

"""
مثال‌های عملی از دو نقطه و فاصله‌گذاری
"""
# Simple if statement with colon (دستور if ساده با استفاده از دو نقطه)
x = 10
if x > 5:
    # This code is indented (این کد تورفتگی دارد)
    print("x is greater than 5")  # خروجی: x is greater than 5 (ترجمه: x بزرگتر از 5 است)
    y = x * 2
    print(f"y = {y}")  # خروجی: y = 20 (ترجمه: y برابر با 20 است)

# Nested if statements (دستورات if تو در تو)
a = 6
b = 7
if a > 5:
    print("a is greater than 5")  # خروجی: a is greater than 5 (ترجمه: a بزرگتر از 5 است)
    if b > a:
        print("b is greater than a")  # خروجی: b is greater than a (ترجمه: b بزرگتر از a است)
    # No indentation means outside the inner if (عدم تورفتگی به معنای خارج بودن از if داخلی است)
    print("This is still inside the first if")  # خروجی: This is still inside the first if (ترجمه: این همچنان درون if اولیه است)

"""
نکات مهم درباره فاصله‌گذاری:
پایتون از فضای خالی (فضای سفید) برای تعیین بلوک‌های کد استفاده می‌کند.
تورفتگی باید یکنواخت باشد (معمولاً 4 فضای خالی یا یک تب).
اگر تورفتگی‌ها را اشتباه انجام دهید، خطای IndentationError رخ می‌دهد.
"""
# Example of indentation error (مثال خطا در تورفتگی)
# try:
#     if True:
#     print("This will cause an error")  # خطا: فاصله‌گذاری اشتباه
# except IndentationError as e:
#         print("Indentation Error:", str(e))
#         # خروجی: Indentation Error: expected an indented block after 'if' statement on line X (ترجمه: خطا در تورفتگی)

# -----------------------------------------------------------------------------------------------------
print("-" * 80)
"""
عدم نیاز به نقطه‌ویرگول (No Semicolon Requirement)
در بسیاری از زبان‌های برنامه‌نویسی مانند C++، Java و JavaScript،
 از نقطه‌ویرگول (;) برای نشان دادن پایان یک دستور استفاده می‌شود.
 اما در پایتون، پایان یک خط همان پایان یک دستور است.
"""

"""
مقایسه استفاده از نقطه‌ویرگول در پایتون و سایر زبان‌ها
"""
# In other languages (در سایر زبان‌ها)
# int a = 5;
# int b = 10;
# int c = a + b;

# In Python (در پایتون)
a = 5
b = 10
c = a + b
print(f"a = {a}, b = {b}, c = {c}")
# خروجی: a = 5, b = 10, c = 15 (ترجمه: مقادیر a و b و c)

# Multiple statements in one line (چندین دستور در یک خط - توصیه نمی‌شود)
# Note: This is possible but not recommended (نکته: این امکان‌پذیر است اما توصیه نمی‌شود)
x = 1; y = 2; z = 3
print(f"x = {x}, y = {y}, z = {z}")
# خروجی: x = 1, y = 2, z = 3 (ترجمه: مقادیر x و y و z)

"""
نکات مهم درباره نقطه‌ویرگول در پایتون:
استفاده از نقطه‌ویرگول برای جدا کردن چندین دستور در یک خط امکان‌پذیر است
 اما توصیه نمی‌شود چون خوانایی کد را کاهش می‌دهد.
در پایتون، پایان خط همان پایان دستور است، مگر اینکه از پرانتز،
 براکت یا آکولاد استفاده شده باشد.
"""
# Line continuation with parentheses (ادامه خط با استفاده از پرانتز)
total = (1 + 2 +
         3 + 4)
print("Total with line continuation:", total)
# خروجی: Total with line continuation: 10 (ترجمه: مجموع با ادامه خط)

# Line continuation with backslash (ادامه خط با استفاده از بک‌اسلش - توصیه نمی‌شود)
value = 10 + \
        20
print("Value with backslash continuation:", value)
# خروجی: Value with backslash continuation: 30 (ترجمه: مقدار با ادامه خط بک‌اسلش)

# -----------------------------------------------------------------------------------------------------
print("-" * 80)
"""
اهمیت تورفتگی در پایتون (Importance of Indentation in Python)
یکی از ویژگی‌های منحصر به فرد پایتون،
 اهمیت بسیار بالای تورفتگی (Indentation) در سینتکس زبان است.
 برخلاف سایر زبان‌ها که از آکولاد برای نشان دادن
 بلوک‌های کد استفاده می‌کنند، پایتون کاملاً به تورفتگی وابسته است.
"""

"""
مثال‌های عملی از تورفتگی در پایتون
"""
# Example of proper indentation (مثال تورفتگی صحیح)
x = 15
if x > 10:
    print("x is greater than 10")  # خروجی: x is greater than 10 (ترجمه: x بزرگتر از 10 است)
    if x > 12:
        print("x is also greater than 12")  # خروجی: x is also greater than 12 (ترجمه: x همچنین بزرگتر از 12 است)
    print("This is still inside the first if")  # خروجی: This is still inside the first if (ترجمه: این همچنان درون if اولیه است)
print("This is outside all ifs")  # خروجی: This is outside all ifs (ترجمه: این خارج از تمام ifها است)

"""
تفاوت تورفتگی در پایتون و سایر زبان‌ها
"""
# Pseudo-code comparison (مقایسه کد شبه‌برنامه)

# In other languages (در سایر زبان‌ها)
# if (x) {
#     if(y) {
#         code-statement;
#     }
# } else {
#     another-code-statement;
# }

# In Python (در پایتون)
x = True
y = False
if x:
    if y:
        print("Both x and y are True")
    else:
        print("x is True but y is False")  # خروجی: x is True but y is False (ترجمه: x درست است اما y نادرست است)
else:
    print("x is False")

"""
نکات مهم درباره تورفتگی:
همگونی تورفتگی بسیار مهم است - نمی‌توانید در یک بلوک از فضای خالی و در بلوک دیگر از تب استفاده کنید.
تورفتگی بخشی از سینتکس پایتون است، نه فقط برای خوانایی کد.
استاندارد پیشنهادی PEP 8 استفاده از 4 فضای خالی برای هر سطح تورفتگی است.
"""
# Mixing tabs and spaces can cause errors (ترکیب تب و فضای خالی می‌تواند باعث خطا شود)
# Note: This example might not show error in all editors but is bad practice
# توجه: این مثال ممکن است در همه ویرایشگرها خطا نشان ندهد اما رفتار بدی است
try:
    a = 10
    if a > 5:
        print("Using spaces")  # 4 spaces (4 فضای خالی)
#      	print("Using tab")  # 1 tab (1 تب) - This would cause error if uncommented (این در صورت فعال کردن باعث خطا می‌شود)
except Exception as e:
    print("Potential indentation error:", str(e))
    # خروجی: Potential indentation error: (توضیح: خطا احتمالی در تورفتگی)

"""
نکته کلیدی:

پایتون به جای استفاده از ساختارهای پیچیده، از خوانایی و سادگی کد حمایت می‌کند.
تورفتگی در پایتون یک انتخاب برای خوانایی نیست، بلکه بخشی از سینتکس زبان است.
دو نقطه (:) برای شروع بلوک‌های کد (مثل if، for، while و توابع) ضروری است.
عدم استفاده از نقطه‌ویرگول باعث می‌شود کد پایتون تمیزتر و شبیه به زبان انسانی به نظر برسد.
"""
