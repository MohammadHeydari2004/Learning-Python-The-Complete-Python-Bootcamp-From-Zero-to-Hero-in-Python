"""
عملگرهای مقایسه‌ای در پایتون امکان مقایسه متغیرها را فراهم می‌کنند و یک مقدار بولین (True یا False) را برمی‌گردانند.
 این عملگرها برای بررسی روابط بین مقادیر مختلف استفاده می‌شوند و اساس تصمیم‌گیری در برنامه‌های پایتون را تشکیل می‌دهند.

اگر سابقه‌ای در ریاضیات دارید، این عملگرها بسیار ساده و قابل فهم خواهند بود.
 در این بخش ابتدا جدولی از عملگرهای مقایسه‌ای ارائه می‌شود و سپس مثال‌های عملی برای هر کدام بررسی می‌گردد.
"""
# Comparison operators return boolean values (عملگرهای مقایسه‌ای مقادیر بولین برمی‌گردانند)
result = 5 > 3
print("5 > 3 comparison result:", result)  # خروجی: 5 > 3 comparison result: True (ترجمه: نتیجه مقایسه 5 بزرگتر از 3)

# Note: == is comparison, = is assignment (نکته: == برای مقایسه است، = برای انتساب مقدار است)
comparison = (5 == 5)  # True - comparison operator (عملگر مقایسه)
assignment = 5         # Just assigns value (فقط مقدار را انتساب می‌دهد)
print("5 == 5 is:", comparison)  # خروجی: 5 == 5 is: True (ترجمه: 5 برابر با 5 است)

"""
نکته مهم:
تفاوت اصلی بین = و == را به خاطر داشته باشید:

= برای انتساب مقدار به متغیر استفاده می‌شود.
== برای مقایسه برابری دو مقدار استفاده می‌شود.
"""

# -----------------------------------------------------------------------------------------------------
print("-" * 80)
"""
 جدول عملگرهای مقایسه‌ای (Table of Comparison Operators)
در جدول زیر، فرض کنید a = 3 و b = 4 است

عملگر	توضیحات	مثال
==	اگر مقادیر دو عملوند برابر باشند، شرط برقرار است.	(a == b) نادرست است.
!=	اگر مقادیر دو عملوند برابر نباشند، شرط برقرار است.	(a != b) درست است.
>	اگر مقدار عملوند سمت چپ بزرگتر از عملوند سمت راست باشد، شرط برقرار است.	(a > b) نادرست است.
<	اگر مقدار عملوند سمت چپ کوچکتر از عملوند سمت راست باشد، شرط برقرار است.	(a < b) درست است.
>=	اگر مقدار عملوند سمت چپ بزرگتر یا مساوی عملوند سمت راست باشد، شرط برقرار است.	(a >= b) نادرست است.
<=	اگر مقدار عملوند سمت چپ کوچکتر یا مساوی عملوند سمت راست باشد، شرط برقرار است.	(a <= b) درست است.
"""
# Define variables for comparison (تعریف متغیرها برای مقایسه)
a = 3
b = 4

# Print the values for reference (چاپ مقادیر برای مرجع)
print(f"Values: a = {a}, b = {b}")  # خروجی: Values: a = 3, b = 4 (ترجمه: مقادیر: a و b)

# -----------------------------------------------------------------------------------------------------
print("-" * 80)
"""
عملگر تساوی (Equal Operator)
عملگر == بررسی می‌کند که آیا دو مقدار با هم برابر هستند یا خیر
"""
# Equal operator examples (مثال‌های عملگر تساوی)
print("2 == 2:", 2 == 2)  # خروجی: 2 == 2: True (ترجمه: 2 برابر با 2 است)
print("1 == 0:", 1 == 0)  # خروجی: 1 == 0: False (ترجمه: 1 برابر با 0 نیست)

# Comparing different data types (مقایسه انواع داده‌های مختلف)
print("5 == '5':", 5 == '5')  # خروجی: 5 == '5': False (ترجمه: 5 عدد برابر با '5' رشته نیست)

# Variable comparison (مقایسه متغیرها)
x = 10
y = 10
print("x == y:", x == y)  # خروجی: x == y: True (ترجمه: x برابر با y است)

"""
نکته مهم:
عملگر == بررسی می‌کند که آیا مقادیر برابر هستند، نه اینکه آیا به یک شیء اشاره می‌کنند.
برای بررسی اینکه آیا دو متغیر به یک شیء اشاره می‌کنند از عملگر is استفاده می‌شود (که در این بخش مطرح نمی‌شود).
"""

# -----------------------------------------------------------------------------------------------------
print("-" * 80)
"""
عملگر نامساوی (Not Equal Operator)
عملگر != بررسی می‌کند که آیا دو مقدار با هم برابر نیستند
"""
# Not equal operator examples (مثال‌های عملگر نامساوی)
print("2 != 1:", 2 != 1)  # خروجی: 2 != 1: True (ترجمه: 2 نامساوی با 1 است)
print("2 != 2:", 2 != 2)  # خروجی: 2 != 2: False (ترجمه: 2 نامساوی با 2 نیست)

# Using with variables (استفاده با متغیرها)
a = 5
b = 7
print("a != b:", a != b)  # خروجی: a != b: True (ترجمه: a نامساوی با b است)

c = 10
d = 10
print("c != d:", c != d)  # خروجی: c != d: False (ترجمه: c نامساوی با d نیست)

"""
کاربرد رایج:
عملگر != اغلب در شرط‌ها برای بررسی عدم برابری استفاده می‌شود، مثلاً برای جلوگیری از تقسیم بر صفر
"""
# Common usage example (مثال کاربرد رایج)
denominator = 0
if denominator != 0:
    result = 10 / denominator
else:
    print("Cannot divide by zero!")  # خروجی: Cannot divide by zero! (ترجمه: تقسیم بر صفر ممکن نیست!)

# -----------------------------------------------------------------------------------------------------
print("-" * 80)
"""
عملگرهای بزرگتر و کوچکتر (Greater Than and Less Than Operators)
عملگرهای > و < برای مقایسه بزرگی و کوچکی مقادیر استفاده می‌شوند
"""
# Greater than operator examples (مثال‌های عملگر بزرگتر از)
print("2 > 1:", 2 > 1)  # خروجی: 2 > 1: True (ترجمه: 2 بزرگتر از 1 است)
print("2 > 4:", 2 > 4)  # خروجی: 2 > 4: False (ترجمه: 2 بزرگتر از 4 نیست)

# Less than operator examples (مثال‌های عملگر کوچکتر از)
print("2 < 4:", 2 < 4)  # خروجی: 2 < 4: True (ترجمه: 2 کوچکتر از 4 است)
print("2 < 1:", 2 < 1)  # خروجی: 2 < 1: False (ترجمه: 2 کوچکتر از 1 نیست)

# Comparing strings (مقایسه رشته‌ها)
print("'apple' < 'banana':", 'apple' < 'banana')  # خروجی: 'apple' < 'banana': True (ترجمه: 'apple' کوچکتر از 'banana' است)
print("'cat' > 'dog':", 'cat' > 'dog')  # خروجی: 'cat' > 'dog': False (ترجمه: 'cat' بزرگتر از 'dog' نیست)

"""
نکته مهم در مقایسه رشته‌ها:
رشته‌ها بر اساس جدول کاراکترها (ASCII یا Unicode) مقایسه می‌شوند. حروف بزرگ قبل از حروف کوچک قرار می‌گیرند
"""
# String comparison details (جزئیات مقایسه رشته‌ها)
print("'A' < 'a':", 'A' < 'a')  # خروجی: 'A' < 'a': True (ترجمه: 'A' کوچکتر از 'a' است)
print("'Z' < 'a':", 'Z' < 'a')  # خروجی: 'Z' < 'a': True (ترجمه: 'Z' کوچکتر از 'a' است)

# -----------------------------------------------------------------------------------------------------
print("-" * 80)
"""
عملگرهای بزرگترمساوی و کوچکترمساوی (Greater Than or Equal to and Less Than or Equal to Operators)
عملگرهای >= و <= بررسی می‌کنند که آیا یک مقدار بزرگتر/مساوی یا کوچکتر/مساوی مقدار دیگر است
"""
# Greater than or equal to operator examples (مثال‌های عملگر بزرگتر یا مساوی)
print("2 >= 2:", 2 >= 2)  # خروجی: 2 >= 2: True (ترجمه: 2 بزرگتر یا مساوی 2 است)
print("2 >= 1:", 2 >= 1)  # خروجی: 2 >= 1: True (ترجمه: 2 بزرگتر یا مساوی 1 است)
print("1 >= 2:", 1 >= 2)  # خروجی: 1 >= 2: False (ترجمه: 1 بزرگتر یا مساوی 2 نیست)

# Less than or equal to operator examples (مثال‌های عملگر کوچکتر یا مساوی)
print("2 <= 2:", 2 <= 2)  # خروجی: 2 <= 2: True (ترجمه: 2 کوچکتر یا مساوی 2 است)
print("2 <= 4:", 2 <= 4)  # خروجی: 2 <= 4: True (ترجمه: 2 کوچکتر یا مساوی 4 است)
print("4 <= 2:", 4 <= 2)  # خروجی: 4 <= 2: False (ترجمه: 4 کوچکتر یا مساوی 2 نیست)

# Using with variables (استفاده با متغیرها)
age = 18
print("age >= 18:", age >= 18)  # خروجی: age >= 18: True (ترجمه: سن بزرگتر یا مساوی 18 است)

"""
کاربرد رایج:
این عملگرها اغلب در شرط‌های محدوده‌ای استفاده می‌شوند، مثلاً برای بررسی سن
"""
# Common usage example (مثال کاربرد رایج)
age = 25
if 18 <= age <= 65:
    print("Working age range")  # خروجی: Working age range (ترجمه: محدوده سنی کار)
else:
    print("Not in working age range")  # خروجی: Not in working age range (ترجمه: خارج از محدوده سنی کار)

# -----------------------------------------------------------------------------------------------------
print("-" * 80)
"""
عملگرهای زنجیره‌ای مقایسه‌ای (Chained Comparison Operators)
یکی از ویژگی‌های جالب پایتون امکان زنجیره‌سازی عملگرهای مقایسه‌ای است که امکان انجام تست‌های پیچیده‌تر را فراهم می‌کند. این زنجیره‌ها می‌توانند به جای عبارات بولین طولانی‌تر استفاده شوند.
"""
# Chained comparison examples (مثال‌های مقایسه زنجیره‌ای)
print("1 < 2 < 3:", 1 < 2 < 3)  # خروجی: 1 < 2 < 3: True (ترجمه: 1 کوچکتر از 2 و 2 کوچکتر از 3)

# This is equivalent to using 'and' (این معادل است با استفاده از 'and')
print("1 < 2 and 2 < 3:", 1 < 2 and 2 < 3)  # خروجی: 1 < 2 and 2 < 3: True (ترجمه: 1 کوچکتر از 2 و 2 کوچکتر از 3)

# Another example (مثال دیگر)
print("1 < 3 > 2:", 1 < 3 > 2)  # خروجی: 1 < 3 > 2: True (ترجمه: 1 کوچکتر از 3 و 3 بزرگتر از 2)

# Equivalent with 'and' (معادل با استفاده از 'and')
print("1 < 3 and 3 > 2:", 1 < 3 and 3 > 2)  # خروجی: 1 < 3 and 3 > 2: True (ترجمه: 1 کوچکتر از 3 و 3 بزرگتر از 2)

"""
نحوه کار زنجیره‌های مقایسه‌ای:
پایتون تمام مقایسه‌ها را از چپ به راست بررسی می‌کند و هر دو طرف مقایسه را بررسی می‌کند
"""
# How chained comparisons work (نحوه کار مقایسه‌های زنجیره‌ای)
print("2 < 3 < 1:", 2 < 3 < 1)  # خروجی: 2 < 3 < 1: False (ترجمه: 2 کوچکتر از 3 اما 3 کوچکتر از 1 نیست)


# -----------------------------------------------------------------------------------------------------
print("-" * 80)
"""
استفاده از and و or در مقایسه‌ها (Using and and or in Comparisons)
برای ایجاد عبارات شرطی پیچیده‌تر، می‌توان از عملگرهای and و or استفاده کرد:
"""

"""
عملگر and
برای برقرار بودن کل عبارت، همه شرط‌ها باید برقرار باشند
"""
# 'and' operator examples (مثال‌های عملگر and)
print("1 < 2 and 2 < 3:", 1 < 2 and 2 < 3)  # خروجی: 1 < 2 and 2 < 3: True (ترجمه: 1 کوچکتر از 2 و 2 کوچکتر از 3)

# All conditions must be true (همه شرط‌ها باید درست باشند)
print("1 < 2 and 2 > 3:", 1 < 2 and 2 > 3)  # خروجی: 1 < 2 and 2 > 3: False (ترجمه: 1 کوچکتر از 2 اما 2 بزرگتر از 3 نیست)

# Practical example (مثال عملی)
temperature = 25
is_summer = True
print("Is hot summer day:", temperature > 30 and is_summer)  # خروجی: Is hot summer day: False (ترجمه: روز تابستانی گرم است)

"""
عملگر or
برای برقرار بودن کل عبارت، حداقل یکی از شرط‌ها باید برقرار باشد
"""
# 'or' operator examples (مثال‌های عملگر or)
print("1 == 2 or 2 < 3:", 1 == 2 or 2 < 3)  # خروجی: 1 == 2 or 2 < 3: True (ترجمه: 1 برابر 2 نیست یا 2 کوچکتر از 3 است)

# Only one condition needs to be true (فقط یکی از شرط‌ها باید درست باشد)
print("1 == 1 or 100 == 1:", 1 == 1 or 100 == 1)  # خروجی: 1 == 1 or 100 == 1: True (ترجمه: 1 برابر 1 است یا 100 برابر 1 است)

# Practical example (مثال عملی)
has_id = False
is_vip = True
print("Can enter club:", has_id or is_vip)  # خروجی: Can enter club: True (ترجمه: می‌تواند وارد باشگاه شود)

"""
ترکیب and و or
می‌توان این عملگرها را با هم ترکیب کرد، اما باید به اولویت‌ها توجه کرد
"""
# Combining 'and' and 'or' (ترکیب and و or)
# Note: 'and' has higher precedence than 'or' (نکته: and اولویت بالاتری نسبت به or دارد)
print("True or False and False:", True or False and False)  # خروجی: True or False and False: True (ترجمه: True یا (False و False))

# Using parentheses for clarity (استفاده از پرانتز برای وضوح بیشتر)
print("(True or False) and False:", (True or False) and False)  # خروجی: (True or False) and False: False (ترجمه: (True یا False) و False)
print("True or (False and False):", True or (False and False))  # خروجی: True or (False and False): True (ترجمه: True یا (False و False))

"""
نکته مهم درباره and و or:
and فقط وقتی True برمی‌گرداند که همه عبارات True باشند.
or وقتی True برمی‌گرداند که حداقل یکی از عبارات True باشد.
پایتون از ارزیابی کوتاه‌سیر (Short-circuit evaluation) استفاده می‌کند،
 یعنی اگر نتیجه مشخص شد، بقیه عبارات ارزیابی نمی‌شوند.
"""

# -----------------------------------------------------------------------------------------------------
print("-" * 80)
"""
نکته کلیدی:

از == برای مقایسه برابری استفاده کنید، نه = که برای انتساب مقدار است.
در مقایسه‌های زنجیره‌ای، پایتون تمام مقایسه‌ها را بررسی می‌کند.
عملگر and نیاز به برقراری تمام شرط‌ها دارد، در حالی که or فقط نیاز به برقراری یک شرط دارد.
برای وضوح بیشتر در عبارات پیچیده، از پرانتز استفاده کنید.
"""
