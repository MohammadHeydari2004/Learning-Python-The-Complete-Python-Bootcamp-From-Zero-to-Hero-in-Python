# ---------------------------------------------------------------------------------------------------------------------
"""
اعداد صحیح (Integers):
 اعداد کامل مثبت یا منفی بدون ممیز اعشاری (مثال: 2, -5, 1000).

اعداد اعشاری (Floating-point numbers):
 اعدادی با ممیز اعشاری یا نماد علمی (مثال: 1.2, -0.5, 2e2 که برابر با 200.0 است).
"""
# Integer examples (مثال‌های عدد صحیح)
print("Integer example 1:", 10)      # خروجی: Integer example 1: 10 (ترجمه: مثال عدد صحیح ۱)
print("Integer example 2:", -5)     # # خروجی: Integer example 2: -5 (ترجمه: مثال عدد صحیح ۲)

print("-" * 75)

# Float examples (مثال‌های عدد اعشاری)
print("Float example 1:", 3.14)      # خروجی: Float example 1: 3.14 (ترجمه: مثال عدد اعشاری ۱)
print("Float example 2:", 4E2)       # خروجی: Float example 2: 400.0 (ترجمه: مثال عدد اعشاری ۲ - 4 ضربدر 10 به توان 2)

print("-" * 75)
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
"""
عملیات ریاضی اساسی در پایتون
"""
# Addition (جمع)
print("2 + 1 =", 2 + 1)  # خروجی: 2 + 1 = 3 (ترجمه: جمع)

# Subtraction (تفریق)
print("2 - 1 =", 2 - 1)  # خروجی: 2 - 1 = 1 (ترجمه: تفریق)

# Multiplication (ضرب)
print("2 * 2 =", 2 * 2)  # خروجی: 2 * 2 = 4 (ترجمه: ضرب)

"""
تقسیم معمولی (/): همیشه خروجی اعشاری می‌دهد.
تقسیم کف (//): قسمت اعشار را حذف کرده و عدد صحیح برمی‌گرداند (بدون گرد کردن).
"""
# Classic Division (تقسیم معمولی)
print("3 / 2 =", 3 / 2)  # خروجی: 3 / 2 = 1.5 (ترجمه: تقسیم معمولی)

# Floor Division (تقسیم کف)
print("7 // 4 =", 7 // 4)  # خروجی: 7 // 4 = 1 (ترجمه: تقسیم کف - قسمت اعشار حذف شد)

"""
عملگر % باقی‌ماندهٔ تقسیم را برمی‌گرداند.
"""
# Modulo (باقی‌مانده تقسیم)
print("7 % 4 =", 7 % 4)  # خروجی: 7 % 4 = 3 (ترجمه: باقی‌ماندهٔ تقسیم 7 بر 4)
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
"""
توان: با ** محاسبه می‌شود.
ریشه: با توان 0.5 (یا کسری) انجام می‌شود.
"""
# Powers (توان)
print("2 ** 3 =", 2 ** 3)  # خروجی: 2 ** 3 = 8 (ترجمه: 2 به توان 3)

# Roots (ریشه)
print("4 ** 0.5 =", 4 ** 0.5)  # خروجی: 4 ** 0.5 = 2.0 (ترجمه: ریشهٔ دوم 4)
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# پایتون از اولویت عملگرها (مثل ریاضیات) پیروی می‌کند. برای تغییر ترتیب از پرانتز استفاده کنید.
# Order of Operations (ترتیب عملگرها)
print("2 + 10 * 10 + 3 =", 2 + 10 * 10 + 3)  # خروجی: 2 + 10 * 10 + 3 = 105 (ترجمه: اول ضرب، سپس جمع)

# Using parentheses (استفاده از پرانتز)
print("(2 + 10) * (10 + 3) =", (2 + 10) * (10 + 3))  # خروجی: (2 + 10) * (10 + 3) = 156 (ترجمه: تغییر ترتیب با پرانتز)
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
"""
 تخصیص متغیرها (01_Variable Assignment)
برای ایجاد متغیر از = استفاده می‌کنیم. نام‌گذاری متغیرها باید این قوانین را رعایت کند:

نمی‌تواند با عدد شروع شود (مثلاً 1var نادرست است).
فاصله مجاز نیست (از _ استفاده کنید، مثلاً my_var).
از کاراکترهای خاص (: ' " , < > و...) خودداری کنید.
بهتر است نام‌ها کوچک باشند (مثلاً my_income).
از حروف l، O، I به تنهایی خودداری کنید (برای جلوگیری از اشتباه).
از کلمات کلیدی پایتون (مثل list، str) استفاده نکنید.
"""
# Assigning a variable (تخصیص مقدار به متغیر)
a = 5
print("a =", a)  # خروجی: a = 5 (ترجمه: مقدار اولیهٔ a)

# Reassignment (تغییر مقدار)
a = 10
print("a after reassignment =", a)  # خروجی: a after reassignment = 10 (ترجمه: تغییر مقدار a)

# Using variable in reassignment (استفاده از متغیر در تغییر مقدار)
a = a + a  # معادل a = 10 + 10
print("a after self-reassignment =", a)  # خروجی: a after self-reassignment = 20 (ترجمه: تغییر مقدار با استفاده از خودش)
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# مثال کاربردی: محاسبه مالیات
# Practical example (مثال کاربردی)
my_income = 100    # درآمد (Income)
tax_rate = 0.1     # نرخ مالیات (Tax rate)
my_taxes = my_income * tax_rate  # محاسبه مالیات
print("My taxes =", my_taxes)  # خروجی: My taxes = 10.0 (ترجمه: مقدار مالیات)
# ---------------------------------------------------------------------------------------------------------------------
